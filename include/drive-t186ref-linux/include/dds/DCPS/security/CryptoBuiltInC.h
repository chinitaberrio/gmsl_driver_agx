// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p14
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_CRYPTOBUILTINC_RMTZJC_H_
#define _TAO_IDL_CRYPTOBUILTINC_RMTZJC_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "DdsSecurity_Export.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "dds/DCPS/ZeroCopyInfoSeq_T.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"
#include /**/ "dds/Versioned_Namespace.h"

#include "dds/DdsDcpsCoreC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO DdsSecurity_Export

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace OpenDDS
{

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:38

  namespace Security
  {

    // TAO_IDL - Generated from
    // be/be_visitor_constant/constant_ch.cpp:38

    const CORBA::ULong TransformKindIndex = 3U;

    // TAO_IDL - Generated from
    // be/be_visitor_constant/constant_ch.cpp:38

    const CORBA::Octet CRYPTO_TRANSFORMATION_KIND_NONE = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_constant/constant_ch.cpp:38

    const CORBA::Octet CRYPTO_TRANSFORMATION_KIND_AES128_GMAC = 1;

    // TAO_IDL - Generated from
    // be/be_visitor_constant/constant_ch.cpp:38

    const CORBA::Octet CRYPTO_TRANSFORMATION_KIND_AES128_GCM = 2;

    // TAO_IDL - Generated from
    // be/be_visitor_constant/constant_ch.cpp:38

    const CORBA::Octet CRYPTO_TRANSFORMATION_KIND_AES256_GMAC = 3;

    // TAO_IDL - Generated from
    // be/be_visitor_constant/constant_ch.cpp:38

    const CORBA::Octet CRYPTO_TRANSFORMATION_KIND_AES256_GCM = 4;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef ::CORBA::Octet CryptoTransformKind[4];
    typedef ::CORBA::Octet CryptoTransformKind_slice;
    struct CryptoTransformKind_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          CryptoTransformKind,
          CryptoTransformKind_slice,
          CryptoTransformKind_tag
        >
      CryptoTransformKind_var;

    typedef
      CryptoTransformKind
      CryptoTransformKind_out;

    typedef
      TAO_Array_Forany_T<
          CryptoTransformKind,
          CryptoTransformKind_slice,
          CryptoTransformKind_tag
        >
      CryptoTransformKind_forany;

    TAO_NAMESPACE_STORAGE_CLASS CryptoTransformKind_slice *
    CryptoTransformKind_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    CryptoTransformKind_free (
        CryptoTransformKind_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS CryptoTransformKind_slice *
    CryptoTransformKind_dup (
        const CryptoTransformKind_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    CryptoTransformKind_copy (
        CryptoTransformKind_slice *_tao_to,
        const CryptoTransformKind_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef ::CORBA::Octet CryptoTransformKeyId[4];
    typedef ::CORBA::Octet CryptoTransformKeyId_slice;
    struct CryptoTransformKeyId_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          CryptoTransformKeyId,
          CryptoTransformKeyId_slice,
          CryptoTransformKeyId_tag
        >
      CryptoTransformKeyId_var;

    typedef
      CryptoTransformKeyId
      CryptoTransformKeyId_out;

    typedef
      TAO_Array_Forany_T<
          CryptoTransformKeyId,
          CryptoTransformKeyId_slice,
          CryptoTransformKeyId_tag
        >
      CryptoTransformKeyId_forany;

    TAO_NAMESPACE_STORAGE_CLASS CryptoTransformKeyId_slice *
    CryptoTransformKeyId_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    CryptoTransformKeyId_free (
        CryptoTransformKeyId_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS CryptoTransformKeyId_slice *
    CryptoTransformKeyId_dup (
        const CryptoTransformKeyId_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    CryptoTransformKeyId_copy (
        CryptoTransformKeyId_slice *_tao_to,
        const CryptoTransformKeyId_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct CryptoTransformIdentifier;

    typedef
      ::TAO_Fixed_Var_T<
          CryptoTransformIdentifier
        >
      CryptoTransformIdentifier_var;

    typedef
      CryptoTransformIdentifier &
      CryptoTransformIdentifier_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct DdsSecurity_Export CryptoTransformIdentifier
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef CryptoTransformIdentifier_var _var_type;
      typedef CryptoTransformIdentifier_out _out_type;
      
      OpenDDS::Security::CryptoTransformKind transformation_kind;
      OpenDDS::Security::CryptoTransformKeyId transformation_key_id;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_OPENDDS_SECURITY_KEYOCTETSEQ_CH_)
#define _OPENDDS_SECURITY_KEYOCTETSEQ_CH_

    class KeyOctetSeq;

    typedef
      ::TAO_FixedSeq_Var_T<
          KeyOctetSeq
        >
      KeyOctetSeq_var;

    typedef
      ::TAO_Seq_Out_T<
          KeyOctetSeq
        >
      KeyOctetSeq_out;

    class DdsSecurity_Export KeyOctetSeq
      : public
          ::TAO::bounded_value_sequence<
              ::CORBA::Octet,
              32
            >
    {
    public:
      KeyOctetSeq (void);
      KeyOctetSeq (
        ::CORBA::ULong length,
        ::CORBA::Octet* buffer,
        ::CORBA::Boolean release = false);
      KeyOctetSeq (const KeyOctetSeq &);
      virtual ~KeyOctetSeq (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef KeyOctetSeq_var _var_type;
      typedef KeyOctetSeq_out _out_type;
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct KeyMaterial_AES_GCM_GMAC;

    typedef
      ::TAO_Var_Var_T<
          KeyMaterial_AES_GCM_GMAC
        >
      KeyMaterial_AES_GCM_GMAC_var;

    typedef
      ::TAO_Out_T<
          KeyMaterial_AES_GCM_GMAC
        >
      KeyMaterial_AES_GCM_GMAC_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct DdsSecurity_Export KeyMaterial_AES_GCM_GMAC
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef KeyMaterial_AES_GCM_GMAC_var _var_type;
      typedef KeyMaterial_AES_GCM_GMAC_out _out_type;
      
      OpenDDS::Security::CryptoTransformKind transformation_kind;
      OpenDDS::Security::KeyOctetSeq master_salt;
      OpenDDS::Security::CryptoTransformKeyId sender_key_id;
      OpenDDS::Security::KeyOctetSeq master_sender_key;
      OpenDDS::Security::CryptoTransformKeyId receiver_specific_key_id;
      OpenDDS::Security::KeyOctetSeq master_receiver_specific_key;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_OPENDDS_SECURITY_KEYMATERIAL_AES_GCM_GMAC_SEQ_CH_)
#define _OPENDDS_SECURITY_KEYMATERIAL_AES_GCM_GMAC_SEQ_CH_

    class KeyMaterial_AES_GCM_GMAC_Seq;

    typedef
      ::TAO_VarSeq_Var_T<
          KeyMaterial_AES_GCM_GMAC_Seq
        >
      KeyMaterial_AES_GCM_GMAC_Seq_var;

    typedef
      ::TAO_Seq_Out_T<
          KeyMaterial_AES_GCM_GMAC_Seq
        >
      KeyMaterial_AES_GCM_GMAC_Seq_out;

    class DdsSecurity_Export KeyMaterial_AES_GCM_GMAC_Seq
      : public
          ::TAO::unbounded_value_sequence<
              KeyMaterial_AES_GCM_GMAC
            >
    {
    public:
      KeyMaterial_AES_GCM_GMAC_Seq (void);
      KeyMaterial_AES_GCM_GMAC_Seq ( ::CORBA::ULong max);
      KeyMaterial_AES_GCM_GMAC_Seq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        KeyMaterial_AES_GCM_GMAC* buffer,
        ::CORBA::Boolean release = false);
      KeyMaterial_AES_GCM_GMAC_Seq (const KeyMaterial_AES_GCM_GMAC_Seq &);
      virtual ~KeyMaterial_AES_GCM_GMAC_Seq (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef KeyMaterial_AES_GCM_GMAC_Seq_var _var_type;
      typedef KeyMaterial_AES_GCM_GMAC_Seq_out _out_type;
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef ::CORBA::Octet SessionIdType[4];
    typedef ::CORBA::Octet SessionIdType_slice;
    struct SessionIdType_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          SessionIdType,
          SessionIdType_slice,
          SessionIdType_tag
        >
      SessionIdType_var;

    typedef
      SessionIdType
      SessionIdType_out;

    typedef
      TAO_Array_Forany_T<
          SessionIdType,
          SessionIdType_slice,
          SessionIdType_tag
        >
      SessionIdType_forany;

    TAO_NAMESPACE_STORAGE_CLASS SessionIdType_slice *
    SessionIdType_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    SessionIdType_free (
        SessionIdType_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS SessionIdType_slice *
    SessionIdType_dup (
        const SessionIdType_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    SessionIdType_copy (
        SessionIdType_slice *_tao_to,
        const SessionIdType_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef ::CORBA::Octet IV_SuffixType[8];
    typedef ::CORBA::Octet IV_SuffixType_slice;
    struct IV_SuffixType_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          IV_SuffixType,
          IV_SuffixType_slice,
          IV_SuffixType_tag
        >
      IV_SuffixType_var;

    typedef
      IV_SuffixType
      IV_SuffixType_out;

    typedef
      TAO_Array_Forany_T<
          IV_SuffixType,
          IV_SuffixType_slice,
          IV_SuffixType_tag
        >
      IV_SuffixType_forany;

    TAO_NAMESPACE_STORAGE_CLASS IV_SuffixType_slice *
    IV_SuffixType_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    IV_SuffixType_free (
        IV_SuffixType_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS IV_SuffixType_slice *
    IV_SuffixType_dup (
        const IV_SuffixType_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    IV_SuffixType_copy (
        IV_SuffixType_slice *_tao_to,
        const IV_SuffixType_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct CryptoHeader;

    typedef
      ::TAO_Fixed_Var_T<
          CryptoHeader
        >
      CryptoHeader_var;

    typedef
      CryptoHeader &
      CryptoHeader_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct DdsSecurity_Export CryptoHeader
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef CryptoHeader_var _var_type;
      typedef CryptoHeader_out _out_type;
      
      OpenDDS::Security::CryptoTransformIdentifier transform_identifier;
      OpenDDS::Security::SessionIdType session_id;
      OpenDDS::Security::IV_SuffixType initialization_vector_suffix;
    };

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct CryptoContent;

    typedef
      ::TAO_Var_Var_T<
          CryptoContent
        >
      CryptoContent_var;

    typedef
      ::TAO_Out_T<
          CryptoContent
        >
      CryptoContent_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct DdsSecurity_Export CryptoContent
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef CryptoContent_var _var_type;
      typedef CryptoContent_out _out_type;
      
      DDS::OctetSeq crypto_content;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef ::CORBA::Octet ReceiverMAC_Type[16];
    typedef ::CORBA::Octet ReceiverMAC_Type_slice;
    struct ReceiverMAC_Type_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          ReceiverMAC_Type,
          ReceiverMAC_Type_slice,
          ReceiverMAC_Type_tag
        >
      ReceiverMAC_Type_var;

    typedef
      ReceiverMAC_Type
      ReceiverMAC_Type_out;

    typedef
      TAO_Array_Forany_T<
          ReceiverMAC_Type,
          ReceiverMAC_Type_slice,
          ReceiverMAC_Type_tag
        >
      ReceiverMAC_Type_forany;

    TAO_NAMESPACE_STORAGE_CLASS ReceiverMAC_Type_slice *
    ReceiverMAC_Type_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    ReceiverMAC_Type_free (
        ReceiverMAC_Type_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS ReceiverMAC_Type_slice *
    ReceiverMAC_Type_dup (
        const ReceiverMAC_Type_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    ReceiverMAC_Type_copy (
        ReceiverMAC_Type_slice *_tao_to,
        const ReceiverMAC_Type_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ReceiverSpecificMAC;

    typedef
      ::TAO_Fixed_Var_T<
          ReceiverSpecificMAC
        >
      ReceiverSpecificMAC_var;

    typedef
      ReceiverSpecificMAC &
      ReceiverSpecificMAC_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct DdsSecurity_Export ReceiverSpecificMAC
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ReceiverSpecificMAC_var _var_type;
      typedef ReceiverSpecificMAC_out _out_type;
      
      OpenDDS::Security::CryptoTransformKeyId receiver_mac_key_id;
      OpenDDS::Security::ReceiverMAC_Type receiver_mac;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_OPENDDS_SECURITY_RECEIVERSPECIFICMACSEQ_CH_)
#define _OPENDDS_SECURITY_RECEIVERSPECIFICMACSEQ_CH_

    class ReceiverSpecificMACSeq;

    typedef
      ::TAO_FixedSeq_Var_T<
          ReceiverSpecificMACSeq
        >
      ReceiverSpecificMACSeq_var;

    typedef
      ::TAO_Seq_Out_T<
          ReceiverSpecificMACSeq
        >
      ReceiverSpecificMACSeq_out;

    class DdsSecurity_Export ReceiverSpecificMACSeq
      : public
          ::TAO::unbounded_value_sequence<
              ReceiverSpecificMAC
            >
    {
    public:
      ReceiverSpecificMACSeq (void);
      ReceiverSpecificMACSeq ( ::CORBA::ULong max);
      ReceiverSpecificMACSeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ReceiverSpecificMAC* buffer,
        ::CORBA::Boolean release = false);
      ReceiverSpecificMACSeq (const ReceiverSpecificMACSeq &);
      virtual ~ReceiverSpecificMACSeq (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ReceiverSpecificMACSeq_var _var_type;
      typedef ReceiverSpecificMACSeq_out _out_type;
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef ::CORBA::Octet CommonMAC_Type[16];
    typedef ::CORBA::Octet CommonMAC_Type_slice;
    struct CommonMAC_Type_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          CommonMAC_Type,
          CommonMAC_Type_slice,
          CommonMAC_Type_tag
        >
      CommonMAC_Type_var;

    typedef
      CommonMAC_Type
      CommonMAC_Type_out;

    typedef
      TAO_Array_Forany_T<
          CommonMAC_Type,
          CommonMAC_Type_slice,
          CommonMAC_Type_tag
        >
      CommonMAC_Type_forany;

    TAO_NAMESPACE_STORAGE_CLASS CommonMAC_Type_slice *
    CommonMAC_Type_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    CommonMAC_Type_free (
        CommonMAC_Type_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS CommonMAC_Type_slice *
    CommonMAC_Type_dup (
        const CommonMAC_Type_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    CommonMAC_Type_copy (
        CommonMAC_Type_slice *_tao_to,
        const CommonMAC_Type_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct CryptoFooter;

    typedef
      ::TAO_Var_Var_T<
          CryptoFooter
        >
      CryptoFooter_var;

    typedef
      ::TAO_Out_T<
          CryptoFooter
        >
      CryptoFooter_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct DdsSecurity_Export CryptoFooter
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef CryptoFooter_var _var_type;
      typedef CryptoFooter_out _out_type;
      
      OpenDDS::Security::CommonMAC_Type common_mac;
      OpenDDS::Security::ReceiverSpecificMACSeq receiver_specific_macs;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_constant/constant_ch.cpp:38

    const CORBA::ULong FLAG_IS_SUBMESSAGE_ENCRYPTED = 1U;

    // TAO_IDL - Generated from
    // be/be_visitor_constant/constant_ch.cpp:38

    const CORBA::ULong FLAG_IS_PAYLOAD_ENCRYPTED = 2U;
  
  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:67
  
  } // module OpenDDS::Security

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module OpenDDS

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68


OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  template<>
  class Arg_Traits< ::OpenDDS::Security::CryptoTransformKind_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::OpenDDS::Security::CryptoTransformKind_var,
            ::OpenDDS::Security::CryptoTransformKind_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::OpenDDS::Security::CryptoTransformKeyId_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::OpenDDS::Security::CryptoTransformKeyId_var,
            ::OpenDDS::Security::CryptoTransformKeyId_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::OpenDDS::Security::CryptoTransformIdentifier>
    : public
        Fixed_Size_Arg_Traits_T<
            ::OpenDDS::Security::CryptoTransformIdentifier,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::OpenDDS::Security::KeyOctetSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::OpenDDS::Security::KeyOctetSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::OpenDDS::Security::KeyMaterial_AES_GCM_GMAC>
    : public
        Var_Size_Arg_Traits_T<
            ::OpenDDS::Security::KeyMaterial_AES_GCM_GMAC,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::OpenDDS::Security::KeyMaterial_AES_GCM_GMAC_Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::OpenDDS::Security::KeyMaterial_AES_GCM_GMAC_Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::OpenDDS::Security::SessionIdType_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::OpenDDS::Security::SessionIdType_var,
            ::OpenDDS::Security::SessionIdType_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::OpenDDS::Security::IV_SuffixType_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::OpenDDS::Security::IV_SuffixType_var,
            ::OpenDDS::Security::IV_SuffixType_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::OpenDDS::Security::CryptoHeader>
    : public
        Fixed_Size_Arg_Traits_T<
            ::OpenDDS::Security::CryptoHeader,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::OpenDDS::Security::CryptoContent>
    : public
        Var_Size_Arg_Traits_T<
            ::OpenDDS::Security::CryptoContent,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::OpenDDS::Security::ReceiverMAC_Type_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::OpenDDS::Security::ReceiverMAC_Type_var,
            ::OpenDDS::Security::ReceiverMAC_Type_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::OpenDDS::Security::ReceiverSpecificMAC>
    : public
        Fixed_Size_Arg_Traits_T<
            ::OpenDDS::Security::ReceiverSpecificMAC,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::OpenDDS::Security::ReceiverSpecificMACSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::OpenDDS::Security::ReceiverSpecificMACSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::OpenDDS::Security::CommonMAC_Type_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::OpenDDS::Security::CommonMAC_Type_var,
            ::OpenDDS::Security::CommonMAC_Type_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::OpenDDS::Security::CryptoFooter>
    : public
        Var_Size_Arg_Traits_T<
            ::OpenDDS::Security::CryptoFooter,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62


OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct DdsSecurity_Export Array_Traits<
      OpenDDS::Security::CryptoTransformKind_forany
    >
  {
    static void free (
        OpenDDS::Security::CryptoTransformKind_slice * _tao_slice);
    static OpenDDS::Security::CryptoTransformKind_slice * dup (
        const OpenDDS::Security::CryptoTransformKind_slice * _tao_slice);
    static void copy (
        OpenDDS::Security::CryptoTransformKind_slice * _tao_to,
        const OpenDDS::Security::CryptoTransformKind_slice * _tao_from);
    static OpenDDS::Security::CryptoTransformKind_slice * alloc (void);
    static void zero (
        OpenDDS::Security::CryptoTransformKind_slice * _tao_slice);
  };
  template<>
  struct DdsSecurity_Export Array_Traits<
      OpenDDS::Security::CryptoTransformKeyId_forany
    >
  {
    static void free (
        OpenDDS::Security::CryptoTransformKeyId_slice * _tao_slice);
    static OpenDDS::Security::CryptoTransformKeyId_slice * dup (
        const OpenDDS::Security::CryptoTransformKeyId_slice * _tao_slice);
    static void copy (
        OpenDDS::Security::CryptoTransformKeyId_slice * _tao_to,
        const OpenDDS::Security::CryptoTransformKeyId_slice * _tao_from);
    static OpenDDS::Security::CryptoTransformKeyId_slice * alloc (void);
    static void zero (
        OpenDDS::Security::CryptoTransformKeyId_slice * _tao_slice);
  };
  template<>
  struct DdsSecurity_Export Array_Traits<
      OpenDDS::Security::SessionIdType_forany
    >
  {
    static void free (
        OpenDDS::Security::SessionIdType_slice * _tao_slice);
    static OpenDDS::Security::SessionIdType_slice * dup (
        const OpenDDS::Security::SessionIdType_slice * _tao_slice);
    static void copy (
        OpenDDS::Security::SessionIdType_slice * _tao_to,
        const OpenDDS::Security::SessionIdType_slice * _tao_from);
    static OpenDDS::Security::SessionIdType_slice * alloc (void);
    static void zero (
        OpenDDS::Security::SessionIdType_slice * _tao_slice);
  };
  template<>
  struct DdsSecurity_Export Array_Traits<
      OpenDDS::Security::IV_SuffixType_forany
    >
  {
    static void free (
        OpenDDS::Security::IV_SuffixType_slice * _tao_slice);
    static OpenDDS::Security::IV_SuffixType_slice * dup (
        const OpenDDS::Security::IV_SuffixType_slice * _tao_slice);
    static void copy (
        OpenDDS::Security::IV_SuffixType_slice * _tao_to,
        const OpenDDS::Security::IV_SuffixType_slice * _tao_from);
    static OpenDDS::Security::IV_SuffixType_slice * alloc (void);
    static void zero (
        OpenDDS::Security::IV_SuffixType_slice * _tao_slice);
  };
  template<>
  struct DdsSecurity_Export Array_Traits<
      OpenDDS::Security::ReceiverMAC_Type_forany
    >
  {
    static void free (
        OpenDDS::Security::ReceiverMAC_Type_slice * _tao_slice);
    static OpenDDS::Security::ReceiverMAC_Type_slice * dup (
        const OpenDDS::Security::ReceiverMAC_Type_slice * _tao_slice);
    static void copy (
        OpenDDS::Security::ReceiverMAC_Type_slice * _tao_to,
        const OpenDDS::Security::ReceiverMAC_Type_slice * _tao_from);
    static OpenDDS::Security::ReceiverMAC_Type_slice * alloc (void);
    static void zero (
        OpenDDS::Security::ReceiverMAC_Type_slice * _tao_slice);
  };
  template<>
  struct DdsSecurity_Export Array_Traits<
      OpenDDS::Security::CommonMAC_Type_forany
    >
  {
    static void free (
        OpenDDS::Security::CommonMAC_Type_slice * _tao_slice);
    static OpenDDS::Security::CommonMAC_Type_slice * dup (
        const OpenDDS::Security::CommonMAC_Type_slice * _tao_slice);
    static void copy (
        OpenDDS::Security::CommonMAC_Type_slice * _tao_to,
        const OpenDDS::Security::CommonMAC_Type_slice * _tao_from);
    static OpenDDS::Security::CommonMAC_Type_slice * alloc (void);
    static void zero (
        OpenDDS::Security::CommonMAC_Type_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const OpenDDS::Security::CryptoTransformKind_forany &_tao_array);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::CryptoTransformKind_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const OpenDDS::Security::CryptoTransformKeyId_forany &_tao_array);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::CryptoTransformKeyId_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OpenDDS::Security::CryptoTransformIdentifier &);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::CryptoTransformIdentifier &);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_OpenDDS_Security_KeyOctetSeq_H_
#define _TAO_CDR_OP_OpenDDS_Security_KeyOctetSeq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


DdsSecurity_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::Security::KeyOctetSeq &_tao_sequence);
DdsSecurity_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::Security::KeyOctetSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_OpenDDS_Security_KeyOctetSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OpenDDS::Security::KeyMaterial_AES_GCM_GMAC &);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::KeyMaterial_AES_GCM_GMAC &);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_OpenDDS_Security_KeyMaterial_AES_GCM_GMAC_Seq_H_
#define _TAO_CDR_OP_OpenDDS_Security_KeyMaterial_AES_GCM_GMAC_Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


DdsSecurity_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::Security::KeyMaterial_AES_GCM_GMAC_Seq &_tao_sequence);
DdsSecurity_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::Security::KeyMaterial_AES_GCM_GMAC_Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_OpenDDS_Security_KeyMaterial_AES_GCM_GMAC_Seq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const OpenDDS::Security::SessionIdType_forany &_tao_array);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::SessionIdType_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const OpenDDS::Security::IV_SuffixType_forany &_tao_array);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::IV_SuffixType_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OpenDDS::Security::CryptoHeader &);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::CryptoHeader &);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OpenDDS::Security::CryptoContent &);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::CryptoContent &);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const OpenDDS::Security::ReceiverMAC_Type_forany &_tao_array);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::ReceiverMAC_Type_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OpenDDS::Security::ReceiverSpecificMAC &);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::ReceiverSpecificMAC &);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_OpenDDS_Security_ReceiverSpecificMACSeq_H_
#define _TAO_CDR_OP_OpenDDS_Security_ReceiverSpecificMACSeq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


DdsSecurity_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::Security::ReceiverSpecificMACSeq &_tao_sequence);
DdsSecurity_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::Security::ReceiverSpecificMACSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_OpenDDS_Security_ReceiverSpecificMACSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const OpenDDS::Security::CommonMAC_Type_forany &_tao_array);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::CommonMAC_Type_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46



OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

DdsSecurity_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OpenDDS::Security::CryptoFooter &);
DdsSecurity_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpenDDS::Security::CryptoFooter &);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// be/be_codegen.cpp:1703


OPENDDS_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "CryptoBuiltInC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

