/* -*- C++ -*- */
/* Generated by /dvs/git/dirty/git-master_autodds/middleware/dds/opendds/build/host/bin/opendds_idl version 3.13 (ACE version 6.2a_p14) running on input file CryptoBuiltIn.idl */
#ifndef OPENDDS_IDL_GENERATED_CRYPTOBUILTINTYPESUPPORTIMPL_H_VESGOU
#define OPENDDS_IDL_GENERATED_CRYPTOBUILTINTYPESUPPORTIMPL_H_VESGOU
#include "CryptoBuiltInC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DdsDcpsCoreC.h"
#include "DdsSecurity_Export.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */


/* Begin TYPEDEF: InstanceHandle_t */


/* End TYPEDEF: InstanceHandle_t */


/* Begin TYPEDEF: BuiltinTopicKeyValue */


/* End TYPEDEF: BuiltinTopicKeyValue */


/* Begin TYPEDEF: InstanceHandleSeq */


/* End TYPEDEF: InstanceHandleSeq */


/* Begin TYPEDEF: QosPolicyId_t */


/* End TYPEDEF: QosPolicyId_t */


/* Begin STRUCT: QosPolicyCount */


/* End STRUCT: QosPolicyCount */


/* Begin TYPEDEF: QosPolicyCountSeq */


/* End TYPEDEF: QosPolicyCountSeq */


/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: Duration_t */


/* End STRUCT: Duration_t */


/* Begin CONST: DURATION_INFINITE_SEC */


/* End CONST: DURATION_INFINITE_SEC */


/* Begin CONST: DURATION_INFINITE_NSEC */


/* End CONST: DURATION_INFINITE_NSEC */


/* Begin CONST: DURATION_ZERO_SEC */


/* End CONST: DURATION_ZERO_SEC */


/* Begin CONST: DURATION_ZERO_NSEC */


/* End CONST: DURATION_ZERO_NSEC */


/* Begin STRUCT: Property_t */


/* End STRUCT: Property_t */


/* Begin TYPEDEF: PropertySeq */


/* End TYPEDEF: PropertySeq */


/* Begin STRUCT: BinaryProperty_t */


/* End STRUCT: BinaryProperty_t */


/* Begin TYPEDEF: BinaryPropertySeq */


/* End TYPEDEF: BinaryPropertySeq */


/* Begin STRUCT: PropertyQosPolicy */


/* End STRUCT: PropertyQosPolicy */


/* Begin STRUCT: UserDataQosPolicy */


/* End STRUCT: UserDataQosPolicy */


/* Begin STRUCT: GroupDataQosPolicy */


/* End STRUCT: GroupDataQosPolicy */


/* Begin STRUCT: TopicDataQosPolicy */


/* End STRUCT: TopicDataQosPolicy */


/* Begin STRUCT: PartitionQosPolicy */


/* End STRUCT: PartitionQosPolicy */


/* Begin ENUM: HistoryQosPolicyKind */


/* End ENUM: HistoryQosPolicyKind */


/* Begin ENUM: DurabilityQosPolicyKind */


/* End ENUM: DurabilityQosPolicyKind */


/* Begin STRUCT: DurabilityQosPolicy */


/* End STRUCT: DurabilityQosPolicy */


/* Begin STRUCT: DurabilityServiceQosPolicy */


/* End STRUCT: DurabilityServiceQosPolicy */


/* Begin STRUCT: DeadlineQosPolicy */


/* End STRUCT: DeadlineQosPolicy */


/* Begin STRUCT: LatencyBudgetQosPolicy */


/* End STRUCT: LatencyBudgetQosPolicy */


/* Begin ENUM: LivelinessQosPolicyKind */


/* End ENUM: LivelinessQosPolicyKind */


/* Begin STRUCT: LivelinessQosPolicy */


/* End STRUCT: LivelinessQosPolicy */


/* Begin ENUM: ReliabilityQosPolicyKind */


/* End ENUM: ReliabilityQosPolicyKind */


/* Begin STRUCT: ReliabilityQosPolicy */


/* End STRUCT: ReliabilityQosPolicy */


/* Begin ENUM: DestinationOrderQosPolicyKind */


/* End ENUM: DestinationOrderQosPolicyKind */


/* Begin STRUCT: DestinationOrderQosPolicy */


/* End STRUCT: DestinationOrderQosPolicy */


/* Begin STRUCT: HistoryQosPolicy */


/* End STRUCT: HistoryQosPolicy */


/* Begin STRUCT: ResourceLimitsQosPolicy */


/* End STRUCT: ResourceLimitsQosPolicy */


/* Begin STRUCT: TransportPriorityQosPolicy */


/* End STRUCT: TransportPriorityQosPolicy */


/* Begin STRUCT: LifespanQosPolicy */


/* End STRUCT: LifespanQosPolicy */


/* Begin ENUM: OwnershipQosPolicyKind */


/* End ENUM: OwnershipQosPolicyKind */


/* Begin STRUCT: OwnershipQosPolicy */


/* End STRUCT: OwnershipQosPolicy */


/* Begin STRUCT: OwnershipStrengthQosPolicy */


/* End STRUCT: OwnershipStrengthQosPolicy */


/* Begin ENUM: PresentationQosPolicyAccessScopeKind */


/* End ENUM: PresentationQosPolicyAccessScopeKind */


/* Begin STRUCT: PresentationQosPolicy */


/* End STRUCT: PresentationQosPolicy */


/* Begin STRUCT: TimeBasedFilterQosPolicy */


/* End STRUCT: TimeBasedFilterQosPolicy */


/* Begin STRUCT: TopicQos */


/* End STRUCT: TopicQos */


/* Begin STRUCT: WriterDataLifecycleQosPolicy */


/* End STRUCT: WriterDataLifecycleQosPolicy */


/* Begin STRUCT: DataWriterQos */


/* End STRUCT: DataWriterQos */


/* Begin STRUCT: EntityFactoryQosPolicy */


/* End STRUCT: EntityFactoryQosPolicy */


/* Begin STRUCT: PublisherQos */


/* End STRUCT: PublisherQos */


/* Begin STRUCT: ReaderDataLifecycleQosPolicy */


/* End STRUCT: ReaderDataLifecycleQosPolicy */


/* Begin STRUCT: DataReaderQos */


/* End STRUCT: DataReaderQos */


/* Begin STRUCT: SubscriberQos */


/* End STRUCT: SubscriberQos */


/* Begin STRUCT: DomainParticipantFactoryQos */


/* End STRUCT: DomainParticipantFactoryQos */


/* Begin STRUCT: DomainParticipantQos */


/* End STRUCT: DomainParticipantQos */


/* Begin STRUCT: BuiltinTopicKey_t */


/* End STRUCT: BuiltinTopicKey_t */


/* Begin STRUCT: ParticipantBuiltinTopicData */


/* End STRUCT: ParticipantBuiltinTopicData */


/* Begin STRUCT: PublicationBuiltinTopicData */


/* End STRUCT: PublicationBuiltinTopicData */


/* Begin STRUCT: SubscriptionBuiltinTopicData */


/* End STRUCT: SubscriptionBuiltinTopicData */


/* Begin STRUCT: TopicBuiltinTopicData */


/* End STRUCT: TopicBuiltinTopicData */


/* Begin TYPEDEF: SampleStateKind */


/* End TYPEDEF: SampleStateKind */


/* Begin CONST: READ_SAMPLE_STATE */


/* End CONST: READ_SAMPLE_STATE */


/* Begin CONST: NOT_READ_SAMPLE_STATE */


/* End CONST: NOT_READ_SAMPLE_STATE */


/* Begin TYPEDEF: SampleStateMask */


/* End TYPEDEF: SampleStateMask */


/* Begin CONST: ANY_SAMPLE_STATE */


/* End CONST: ANY_SAMPLE_STATE */


/* Begin TYPEDEF: ViewStateKind */


/* End TYPEDEF: ViewStateKind */


/* Begin CONST: NEW_VIEW_STATE */


/* End CONST: NEW_VIEW_STATE */


/* Begin CONST: NOT_NEW_VIEW_STATE */


/* End CONST: NOT_NEW_VIEW_STATE */


/* Begin TYPEDEF: ViewStateMask */


/* End TYPEDEF: ViewStateMask */


/* Begin CONST: ANY_VIEW_STATE */


/* End CONST: ANY_VIEW_STATE */


/* Begin TYPEDEF: InstanceStateKind */


/* End TYPEDEF: InstanceStateKind */


/* Begin CONST: ALIVE_INSTANCE_STATE */


/* End CONST: ALIVE_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* Begin TYPEDEF: InstanceStateMask */


/* End TYPEDEF: InstanceStateMask */


/* Begin CONST: ANY_INSTANCE_STATE */


/* End CONST: ANY_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_INSTANCE_STATE */


/* Begin STRUCT: Time_t */


/* End STRUCT: Time_t */


/* Begin CONST: TIME_INVALID_SEC */


/* End CONST: TIME_INVALID_SEC */


/* Begin CONST: TIME_INVALID_NSEC */


/* End CONST: TIME_INVALID_NSEC */


/* Begin STRUCT: SampleInfo */


/* End STRUCT: SampleInfo */


/* Begin TYPEDEF: SampleInfoSeq */


/* End TYPEDEF: SampleInfoSeq */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: Security */



/* Begin CONST: TransformKindIndex */


/* End CONST: TransformKindIndex */


/* Begin CONST: CRYPTO_TRANSFORMATION_KIND_NONE */


/* End CONST: CRYPTO_TRANSFORMATION_KIND_NONE */


/* Begin CONST: CRYPTO_TRANSFORMATION_KIND_AES128_GMAC */


/* End CONST: CRYPTO_TRANSFORMATION_KIND_AES128_GMAC */


/* Begin CONST: CRYPTO_TRANSFORMATION_KIND_AES128_GCM */


/* End CONST: CRYPTO_TRANSFORMATION_KIND_AES128_GCM */


/* Begin CONST: CRYPTO_TRANSFORMATION_KIND_AES256_GMAC */


/* End CONST: CRYPTO_TRANSFORMATION_KIND_AES256_GMAC */


/* Begin CONST: CRYPTO_TRANSFORMATION_KIND_AES256_GCM */


/* End CONST: CRYPTO_TRANSFORMATION_KIND_AES256_GCM */


/* Begin TYPEDEF: CryptoTransformKind */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::CryptoTransformKind_forany& arr, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::CryptoTransformKind_forany& arr);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::CryptoTransformKind_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::CryptoTransformKind_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: CryptoTransformKind */


/* Begin TYPEDEF: CryptoTransformKeyId */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::CryptoTransformKeyId_forany& arr, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::CryptoTransformKeyId_forany& arr);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::CryptoTransformKeyId_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::CryptoTransformKeyId_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: CryptoTransformKeyId */


/* Begin STRUCT: CryptoTransformIdentifier */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::CryptoTransformIdentifier& stru, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::CryptoTransformIdentifier& stru);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::CryptoTransformIdentifier& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
DdsSecurity_Export
const MetaStruct& getMetaStruct<OpenDDS::Security::CryptoTransformIdentifier>();
DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::CryptoTransformIdentifier*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: CryptoTransformIdentifier */


/* Begin TYPEDEF: KeyOctetSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::KeyOctetSeq& seq, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::KeyOctetSeq& seq);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::KeyOctetSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::KeyOctetSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: KeyOctetSeq */


/* Begin STRUCT: KeyMaterial_AES_GCM_GMAC */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::KeyMaterial_AES_GCM_GMAC& stru, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::KeyMaterial_AES_GCM_GMAC& stru);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::KeyMaterial_AES_GCM_GMAC& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
DdsSecurity_Export
const MetaStruct& getMetaStruct<OpenDDS::Security::KeyMaterial_AES_GCM_GMAC>();
DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::KeyMaterial_AES_GCM_GMAC*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: KeyMaterial_AES_GCM_GMAC */


/* Begin TYPEDEF: KeyMaterial_AES_GCM_GMAC_Seq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::KeyMaterial_AES_GCM_GMAC_Seq& seq, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::KeyMaterial_AES_GCM_GMAC_Seq& seq);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::KeyMaterial_AES_GCM_GMAC_Seq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::KeyMaterial_AES_GCM_GMAC_Seq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: KeyMaterial_AES_GCM_GMAC_Seq */


/* Begin TYPEDEF: SessionIdType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::SessionIdType_forany& arr, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::SessionIdType_forany& arr);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::SessionIdType_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::SessionIdType_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: SessionIdType */


/* Begin TYPEDEF: IV_SuffixType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::IV_SuffixType_forany& arr, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::IV_SuffixType_forany& arr);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::IV_SuffixType_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::IV_SuffixType_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: IV_SuffixType */


/* Begin STRUCT: CryptoHeader */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::CryptoHeader& stru, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::CryptoHeader& stru);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::CryptoHeader& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
DdsSecurity_Export
const MetaStruct& getMetaStruct<OpenDDS::Security::CryptoHeader>();
DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::CryptoHeader*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: CryptoHeader */


/* Begin STRUCT: CryptoContent */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::CryptoContent& stru, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::CryptoContent& stru);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::CryptoContent& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
DdsSecurity_Export
const MetaStruct& getMetaStruct<OpenDDS::Security::CryptoContent>();
DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::CryptoContent*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: CryptoContent */


/* Begin TYPEDEF: ReceiverMAC_Type */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::ReceiverMAC_Type_forany& arr, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::ReceiverMAC_Type_forany& arr);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::ReceiverMAC_Type_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::ReceiverMAC_Type_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ReceiverMAC_Type */


/* Begin STRUCT: ReceiverSpecificMAC */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::ReceiverSpecificMAC& stru, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::ReceiverSpecificMAC& stru);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::ReceiverSpecificMAC& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
DdsSecurity_Export
const MetaStruct& getMetaStruct<OpenDDS::Security::ReceiverSpecificMAC>();
DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::ReceiverSpecificMAC*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ReceiverSpecificMAC */


/* Begin TYPEDEF: ReceiverSpecificMACSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::ReceiverSpecificMACSeq& seq, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::ReceiverSpecificMACSeq& seq);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::ReceiverSpecificMACSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::ReceiverSpecificMACSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ReceiverSpecificMACSeq */


/* Begin TYPEDEF: CommonMAC_Type */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::CommonMAC_Type_forany& arr, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::CommonMAC_Type_forany& arr);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::CommonMAC_Type_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::CommonMAC_Type_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: CommonMAC_Type */


/* Begin STRUCT: CryptoFooter */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

DdsSecurity_Export
void gen_find_size(const OpenDDS::Security::CryptoFooter& stru, size_t& size, size_t& padding);

DdsSecurity_Export
bool operator<<(Serializer& strm, const OpenDDS::Security::CryptoFooter& stru);

DdsSecurity_Export
bool operator>>(Serializer& strm, OpenDDS::Security::CryptoFooter& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
DdsSecurity_Export
const MetaStruct& getMetaStruct<OpenDDS::Security::CryptoFooter>();
DdsSecurity_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Security::CryptoFooter*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: CryptoFooter */


/* Begin CONST: FLAG_IS_SUBMESSAGE_ENCRYPTED */


/* End CONST: FLAG_IS_SUBMESSAGE_ENCRYPTED */


/* Begin CONST: FLAG_IS_PAYLOAD_ENCRYPTED */


/* End CONST: FLAG_IS_PAYLOAD_ENCRYPTED */

/* End MODULE: Security */

/* End MODULE: OpenDDS */
#endif /* OPENDDS_IDL_GENERATED_CRYPTOBUILTINTYPESUPPORTIMPL_H_VESGOU */
